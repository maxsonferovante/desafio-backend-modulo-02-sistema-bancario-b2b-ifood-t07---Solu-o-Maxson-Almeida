// Generated by CodiumAI

describe('depositar', () => {

});

// Test that the 'depositar' function successfully deposits a positive value to an existing account
it('should successfully deposit a positive value to an existing account', () => {
    // Set up
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    const saldoBeforeDeposit = contas[contaIndex].saldo;

    // Execute
    depositar(req, res);

    // Assert
    expect(contas[contaIndex].saldo).toBe(saldoBeforeDeposit + req.body.valor);
    expect(depositos.length).toBe(1);
    expect(depositos[0].numero_conta).toBe(req.body.numero_conta);
    expect(depositos[0].valor).toBe(req.body.valor);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the 'depositar' function successfully deposits money into an existing account by increasing the account's balance and adding a deposit transaction to the 'depositos' array.
it('should successfully deposit money into an existing account', () => {
    // Arrange
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    const saldoBeforeDeposit = contas[contaIndex].saldo;
    const deposito = {
        data: expect.any(String),
        numero_conta: req.body.numero_conta,
        valor: req.body.valor
    };

    // Act
    depositar(req, res);

    // Assert
    expect(contas[contaIndex].saldo).toBe(saldoBeforeDeposit + req.body.valor);
    expect(depositos).toContainEqual(deposito);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the function 'depositar' correctly handles a deposit transaction with a value of zero
it('should return a 204 status code and update the account balance when depositing a value of zero', () => {
    // Arrange
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: 0
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    contas[contaIndex] = {
        numero: '123456',
        saldo: 100
    };
    const expectedDeposit = {
        data: dataParaRegistroDeTransacoes(),
        numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
        valor: 0
    };

    // Act
    depositar(req, res);

    // Assert
    expect(contas[contaIndex].saldo).toBe(100);
    expect(depositos).toContainEqual(expectedDeposit);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the depositar function correctly handles deposit transactions by increasing the balance of an existing account by the deposited value
it('should increase the balance of an existing account by the deposited value', () => {
    // Arrange
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: 1
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    contas[contaIndex] = {
        numero: '123456',
        saldo: 0
    };
    const expectedDeposit = {
        data: expect.any(String),
        numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
        valor: 1
    };

    // Act
    depositar(req, res);

    // Assert
    expect(contas[contaIndex].saldo).toBe(1);
    expect(depositos).toContainEqual(expectedDeposit);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the depositar function correctly handles a deposit transaction by increasing the balance of an existing account by the specified value
it('should increase the balance of an existing account by the specified value when depositing', () => {
    // Arrange
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: 1
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    const saldoBeforeDeposit = contas[contaIndex].saldo;

    // Act
    depositar(req, res);

    // Assert
    expect(contas[contaIndex].saldo).toBe(saldoBeforeDeposit + req.body.valor);
    expect(depositos.length).toBe(1);
    expect(depositos[0].numero_conta).toBe(req.body.numero_conta);
    expect(depositos[0].valor).toBe(req.body.valor);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the 'depositar' function correctly handles deposit transactions by adding the deposited value to the account balance and updating the transaction history
it('should add the deposited value to the account balance and update the transaction history when depositing a value of 1 into an existing account with a negative balance', () => {
    // Arrange
    const req = {
        body: {
            numero_conta: "123456",
            valor: 1
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    contas[contaIndex] = {
        numero: "123456",
        saldo: -10
    };
    const expectedConta = {
        numero: "123456",
        saldo: -9
    };
    const expectedDeposito = {
        data: expect.any(String),
        numero_conta: "123456",
        valor: 1
    };

    // Act
    depositar(req, res);

    // Assert
    expect(contas[contaIndex]).toEqual(expectedConta);
    expect(depositos).toContainEqual(expectedDeposito);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that an error message is returned when trying to deposit a value into a non-existing account
it('should return an error message when depositing into a non-existing account', () => {
    const req = {
        body: {
            numero_conta: 'non-existing-account',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    depositar(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Account does not exist" });
});


// Test that when a value of NaN is deposited into an existing account, the function throws an error and returns a 400 status code with an error message
it('should throw an error and return a 400 status code when depositing a value of NaN into an existing account', () => {
    const req = {
        body: {
            numero_conta: "123456",
            valor: NaN
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    depositar(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Invalid deposit value" });
});


// Test that the function 'depositar' throws an error when trying to deposit a value of Infinity into an existing account
it('should throw an error when depositing a value of Infinity into an existing account', () => {
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: Infinity
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    depositar(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Cannot deposit a value of Infinity" });
});


// Test that the 'depositar' function successfully deposits money into an existing account by increasing the account's balance and adding a deposit transaction to the 'depositos' array.
it('should successfully deposit money into an existing account', () => {
    // Arrange
    const req = {
        body: {
            numero_conta: 123456,
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    const saldoBeforeDeposit = contas[contaIndex].saldo;
    const depositoBeforeDeposit = depositos.length;

    // Act
    depositar(req, res);

    // Assert
    expect(contas[contaIndex].saldo).toBe(saldoBeforeDeposit + req.body.valor);
    expect(depositos.length).toBe(depositoBeforeDeposit + 1);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the account balance is updated correctly when a deposit is made
it('should update account balance when a deposit is made', () => {
    const req = {
        body: {
            numero_conta: 123456,
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    contas[contaIndex] = {
        numero: 123456,
        saldo: 500
    };
    depositar(req, res);
    expect(contas[contaIndex].saldo).toBe(600);
});


// Test that the deposit transaction details are recorded correctly
it('should record deposit transaction details when depositing into an account', () => {
    const req = {
        body: {
            numero_conta: 123456,
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = contas.findIndex(conta => conta.numero === req.body.numero_conta);
    const deposito = {
        "data": dataParaRegistroDeTransacoes(),
        "numero_conta": req.body.numero_conta,
        "valor": req.body.valor
    };

    depositar(req, res);

    expect(contas[contaIndex].saldo).toBe(100);
    expect(depositos).toContainEqual(deposito);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the 'depositar' function sends a success response with status code 204
it('should send a success response with status code 204', () => {
    // Mock request and response objects
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    // Mock the findIndex method
    const mockFindIndex = jest.fn().mockReturnValue(0);
    contas.findIndex = mockFindIndex;

    // Call the depositar function
    depositar(req, res);

    // Check if the saldo and depositos arrays are updated correctly
    expect(contas[0].saldo).toBe(100);
    expect(depositos.length).toBe(1);
    expect(depositos[0].data).toMatch(/\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}/);
    expect(depositos[0].numero_conta).toBe('123456');
    expect(depositos[0].valor).toBe(100);

    // Check if the response status and send methods are called correctly
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the 'depositar' function returns an error response with status code 400 when the deposit value is not a number or is negative
it('should return an error response with status code 400 when the deposit value is not a number or is negative', () => {
    const req = {
        body: {
            numero_conta: "123456",
            valor: -100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    depositar(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Invalid deposit value" });
});


// Test that an error response with status code 400 is returned when the account number is invalid
it('should return an error response with status code 400 when the account number is invalid', () => {
    // Arrange
    const req = {
        body: {
            numero_conta: 'invalid_account_number',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = contas.findIndex(conta => conta.numero === req.body.numero_conta);

    // Act
    depositar(req, res);

    // Assert
    expect(contaIndex).toBe(-1);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Invalid account number" });
});



describe('sacar', () => {
});

// Test that the 'sacar' function successfully processes a withdrawal transaction, subtracts the withdrawal amount from the account balance, and records the transaction in the 'saques' array.
it('should subtract the withdrawal amount from the account balance and record the transaction in the "saques" array when the withdrawal is successful', () => {
    // Mock request and response objects
    const req = {
        body: {
            numero_conta: 123456,
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    // Mock data
    const contas = [
        { numero: 123456, saldo: 500 }
    ];
    const saques = [];

    // Mock dataParaRegistroDeTransacoes function
    const dataParaRegistroDeTransacoes = jest.fn().mockReturnValue('2022-01-01 00:00:00');

    // Call the sacar function
    sacar(req, res);

    // Assertions
    expect(contas[0].saldo).toBe(400);
    expect(saques.length).toBe(1);
    expect(saques[0]).toEqual({
        data: '2022-01-01 00:00:00',
        numero_conta: 123456,
        valor: 100
    });
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that a withdrawal transaction is processed successfully, and a response with a status code of 204 is sent.
it('should process withdrawal transaction successfully and send a response with status code 204', () => {
    // Mock request and response objects
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    // Mock data
    const contas = [
        { numero: '123456', saldo: 500 }
    ];
    const saques = [];

    // Mock dataParaRegistroDeTransacoes function
    const dataParaRegistroDeTransacoes = jest.fn().mockReturnValue('2022-01-01 10:00:00');

    // Call the sacar function
    sacar(req, res);

    // Assertions
    expect(dataParaRegistroDeTransacoes).toHaveBeenCalled();
    expect(contas[0].saldo).toBe(400);
    expect(saques.length).toBe(1);
    expect(saques[0]).toEqual({
        data: '2022-01-01 10:00:00',
        numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
        valor: 100
    });
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that when the withdrawal amount is greater than the account balance, the function 'sacar' sends a response with a status code of 400 and an error message.
it('should send a response with status code 400 and an error message when the withdrawal amount is greater than the account balance', () => {
    const req = {
        body: {
            numero_conta: 123,
            valor: 1000
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = contas.findIndex(conta => conta.numero === req.body.numero_conta);
    const saque = {
        "data": dataParaRegistroDeTransacoes(),
        "numero_conta": req.body.numero_conta,
        "valor": req.body.valor
    };

    try {
        contas[contaIndex].saldo -= req.body.valor;
        saques.push(saque);
        expect(res.status).toHaveBeenCalledWith(204);
        expect(res.send).toHaveBeenCalled();
    } catch (error) {
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.send).toHaveBeenCalledWith({ "mensagem": error.message });
    }
});


// Test that when the account number is not found in the `contas` array, the function 'sacar' sends a response with a status code of 400 and an error message.
it('should send a response with status code 400 and an error message when the account number is not found', () => {
    // Arrange
    const req = {
        body: {
            numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = contas.findIndex(conta => conta.numero === req.body.numero_conta);

    // Act
    sacar(req, res);

    // Assert
    expect(contaIndex).toBe(-1);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Account number not found" });
});


// Test that the withdrawal amount is equal to the account balance, and the account balance is updated to zero.
it('should update account balance to zero when withdrawal amount is equal to the account balance', () => {
    // Set up
    const req = {
        body: {
            numero_conta: 123,
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = 0;
    contas[contaIndex] = {
        numero: 123,
        saldo: 100
    };
    saques = [];

    // Call the function
    sacar(req, res);

    // Check the results
    expect(contas[contaIndex].saldo).toBe(0);
    expect(saques.length).toBe(1);
    expect(saques[0].data).toBeDefined();
    expect(saques[0].numero_conta).toBe(123);
    expect(saques[0].valor).toBe(100);
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});



describe('transferir', () => {
});

// Test that the function 'transferir' correctly transfers a value between two existing accounts with sufficient balance
it('should transfer value between two existing accounts with sufficient balance', () => {
    // Set up
    const req = {
        body: {
            numero_conta_origem: 123,
            numero_conta_destino: 456,
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndexOrigem = 0;
    const contaIndexDestino = 1;
    const saldoOrigem = contas[contaIndexOrigem].saldo;
    const saldoDestino = contas[contaIndexDestino].saldo;

    // Execute
    transferir(req, res);

    // Verify
    expect(contas[contaIndexOrigem].saldo).toBe(saldoOrigem - req.body.valor);
    expect(contas[contaIndexDestino].saldo).toBe(saldoDestino + req.body.valor);
    expect(transferencias).toContainEqual({
        data: expect.any(String),
        numero_conta_origem: req.body.numero_conta_origem,
        numero_conta_destino: req.body.numero_conta_destino,
        valor: req.body.valor
    });
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the function 'transferir' throws an error with a specific message when the value to be transferred is zero.
it('should throw an error when the value to be transferred is zero', () => {
    const req = {
        body: {
            numero_conta_origem: '123',
            numero_conta_destino: '456',
            valor: 0
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    transferir(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Valor inválido para transferência" });
});


// Test that the function 'transferir' correctly transfers a value equal to the balance of the origin account
it('should transfer value equal to balance of origin account when called with valid parameters', () => {
    // Set up
    const req = {
        body: {
            numero_conta_origem: 123,
            numero_conta_destino: 456,
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndexOrigem = 0;
    const contaIndexDestino = 1;
    contas[contaIndexOrigem].saldo = 100;
    contas[contaIndexDestino].saldo = 0;

    // Call the function
    transferir(req, res);

    // Check the results
    expect(contas[contaIndexOrigem].saldo).toBe(0);
    expect(contas[contaIndexDestino].saldo).toBe(100);
    expect(transferencias).toHaveLength(1);
    expect(transferencias[0]).toEqual({
        data: expect.any(String),
        numero_conta_origem: 123,
        numero_conta_destino: 456,
        valor: 100
    });
    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
});


// Test that the function 'transferir' throws an error with the message "Saldo insuficiente" when the value to be transferred is greater than the balance of the origin account.
it('should throw an error when the value to be transferred is greater than the balance of the origin account', () => {
    const req = {
        body: {
            numero_conta_origem: 123,
            numero_conta_destino: 456,
            valor: 1000
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    contas.push({ numero: 123, saldo: 500 });
    contas.push({ numero: 456, saldo: 1000 });

    transferir(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Saldo insuficiente" });
});


// Test that the function 'transferir' throws an error and returns a status code 400 when the value to be transferred is negative.
it('should throw an error and return status code 400 when the value to be transferred is negative', () => {
    const req = {
        body: {
            numero_conta_origem: '123',
            numero_conta_destino: '456',
            valor: -100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    transferir(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Valor inválido para transferência" });
});


// Test that when transferring a value to a non-existent account, the function throws an error with the appropriate message
it('should throw an error when transferring a value to a non-existent account', () => {
    const req = {
        body: {
            numero_conta_origem: '123',
            numero_conta_destino: '456',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    transferir(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Conta não encontrada" });
});


// Test that when transferring a value from a non-existent account, an error message is returned
it('should return an error message when transferring a value from a non-existent account', () => {
    const req = {
        body: {
            numero_conta_origem: 'nonexistent',
            numero_conta_destino: 'destination',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    transferir(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Conta não encontrada" });
});


// Test that when transferring a value to the same destination account, the function throws an error with the appropriate message
it('should throw an error when transferring a value to the same destination account', () => {
    const req = {
        body: {
            numero_conta_origem: '123',
            numero_conta_destino: '123',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    transferir(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Cannot transfer to the same destination account" });
});


// Test that the function 'transferir' throws an error and returns a status code 400 when trying to transfer a value to the same account of origin
it('should throw an error and return status code 400 when transferring value to the same account of origin', () => {
    const req = {
        body: {
            numero_conta_origem: '123',
            numero_conta_destino: '123',
            valor: 100
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    transferir(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Cannot transfer value to the same account of origin" });
});


// Test that the function 'transferir' throws an error when the value to transfer is a string
it('should throw an error when the value to transfer is a string', () => {
    const req = {
        body: {
            numero_conta_origem: "123",
            numero_conta_destino: "456",
            valor: "abc"
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    transferir(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Valor inválido" });
});



describe('consultarSaldo', () => {
});

// Test that the function 'consultarSaldo' returns the account balance when given a valid account number
it('should return the account balance when given a valid account number', () => {
    const req = {
        query: {
            numero_conta: '1234567890'
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = contas.findIndex(conta => conta.numero === req.query.numero_conta);
    const saldo = contas[contaIndex].saldo;

    consultarSaldo(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.send).toHaveBeenCalledWith({ "saldo": saldo });
});


// Test that the consultarSaldo function returns a success status code (200) when given a valid account number
it('should return a success status code (200) when given a valid account number', () => {
    const req = {
        query: {
            numero_conta: '1234567890'
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = contas.findIndex(conta => conta.numero === req.query.numero_conta);
    consultarSaldo(req, res);
    expect(res.status).toHaveBeenCalledWith(200);
});


// Test that the function 'consultarSaldo' correctly handles multiple requests with different account numbers
it('should return the correct balance for each account number', () => {
    // Mock the request and response objects
    const req1 = { query: { numero_conta: '123' } };
    const res1 = { status: jest.fn().mockReturnThis(), send: jest.fn() };
    const req2 = { query: { numero_conta: '456' } };
    const res2 = { status: jest.fn().mockReturnThis(), send: jest.fn() };

    // Call the consultarSaldo function with different account numbers
    consultarSaldo(req1, res1);
    consultarSaldo(req2, res2);

    // Expect the correct balances to be sent in the response
    expect(res1.status).toHaveBeenCalledWith(200);
    expect(res1.send).toHaveBeenCalledWith({ "saldo": contas[0].saldo });
    expect(res2.status).toHaveBeenCalledWith(200);
    expect(res2.send).toHaveBeenCalledWith({ "saldo": contas[1].saldo });
});


// Test that the function 'consultarSaldo' returns a status code of 400 and an error message when given an invalid account number
it('should return a status code of 400 and an error message when given an invalid account number', () => {
    const req = {
        query: {
            numero_conta: 'invalid_account_number'
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const contaIndex = contas.findIndex(conta => conta.numero === req.query.numero_conta);
    consultarSaldo(req, res);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ "mensagem": "Invalid account number" });
});


// Test that the function 'consultarSaldo' returns a status code of 400 when the account number is not provided in the request query parameters
it('should return a status code of 400 when the account number is not provided', () => {
    const req = { query: {} };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    consultarSaldo(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
});



describe('emitirExtrato', () => {
});

// Test that the function 'emitirExtrato' returns a valid extrato object with all transactions filtered by the given numero_conta
it('should return a valid extrato object when a valid numero_conta is provided', () => {
    // Arrange
    const req = {
        query: {
            numero_conta: '1234567890'
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const expectedExtrato = {
        depositos: [],
        saques: [],
        transferenciasEnviadas: [],
        transferenciasRecebidas: []
    };

    // Act
    emitirExtrato(req, res);

    // Assert
    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.send).toHaveBeenCalledWith(expectedExtrato);
});


// Test that the function 'emitirExtrato' returns a status code of 200 when successful.
it('should return status code 200 when successful', () => {
    const req = {
        query: {
            numero_conta: '1234567890'
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    emitirExtrato(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
});


// Test that the function 'emitirExtrato' returns an empty extrato object when no transactions are found for the given numero_conta
it('should return an empty extrato object when no transactions are found for the given numero_conta', () => {
    const req = {
        query: {
            numero_conta: '123456'
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };
    const expectedExtrato = {
        depositos: [],
        saques: [],
        transferenciasEnviadas: [],
        transferenciasRecebidas: []
    };

    emitirExtrato(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.send).toHaveBeenCalledWith(expectedExtrato);
});


// Test that the function 'emitirExtrato' returns a status code of 400 and an error message when an error occurs during the request.
it('should return status code 400 and an error message when an error occurs during the request', () => {
    const req = { query: { numero_conta: '123456' } };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    // Mocking the behavior of the 'depositos', 'saques', and 'transferencias' arrays
    const depositos = [
        { numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1', valor: 100 },
        { numero_conta: '789012', valor: 200 }
    ];
    const saques = [
        { numero_conta: 'bb20d3f2-f22f-44cd-83f8-a40f875f27f1', valor: 50 },
        { numero_conta: '789012', valor: 100 }
    ];
    const transferencias = [
        { numero_conta_origem: '123456', numero_conta_destino: '789012', valor: 150 },
        { numero_conta_origem: '789012', numero_conta_destino: '123456', valor: 250 }
    ];

    // Mocking the behavior of the 'require' function
    jest.mock('../bancodedados', () => ({
        contas: [],
        depositos,
        saques,
        transferencias
    }));

    // Call the function to be tested
    emitirExtrato(req, res);

    // Assertion
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.send).toHaveBeenCalledWith({ mensagem: expect.any(String) });
});


// Test that the function 'emitirExtrato' correctly filters the 'transferenciasEnviadasFiltradas' and 'transferenciasRecebidasFiltradas' arrays separately based on the 'numero_conta' parameter.
it('should filter transferenciasEnviadasFiltradas and transferenciasRecebidasFiltradas separately when given a valid \'numero_conta\'', () => {
    const req = {
        query: {
            numero_conta: '1234567890'
        }
    };
    const res = {
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
    };

    emitirExtrato(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.send).toHaveBeenCalledWith({
        depositos: [],
        saques: [],
        transferenciasEnviadas: [],
        transferenciasRecebidas: []
    });
});



describe('dataParaRegistroDeTransacoes', () => {
});

// Test that the function 'dataParaRegistroDeTransacoes' returns a string in the format "YYYY-MM-DD HH:MM:SS" for the current date and time.
it('should return a string in the format "YYYY-MM-DD HH:MM:SS" for the current date and time', () => {
    // Arrange
    const currentDate = new Date();
    const expectedDate = currentDate.toISOString().slice(0, 19).replace("T", " ");

    // Act
    const result = dataParaRegistroDeTransacoes();

    // Assert
    expect(result).toBe(expectedDate);
});


// Test that the function 'dataParaRegistroDeTransacoes' returns the current date and time in the format 'YYYY-MM-DD HH:MM:SS'.
it('should return the current date and time in the correct format', () => {
    // Arrange
    const currentDate = new Date();
    const expectedDate = currentDate.toISOString().slice(0, 19).replace("T", " ");

    // Act
    const result = dataParaRegistroDeTransacoes();

    // Assert
    expect(result).toBe(expectedDate);
});

