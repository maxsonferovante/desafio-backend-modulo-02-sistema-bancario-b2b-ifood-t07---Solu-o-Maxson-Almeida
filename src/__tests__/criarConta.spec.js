// Generated by CodiumAI

const {
    criarConta,
} = require('../controladores/contaBancaria');

const { contas } = require('../bancodedados');

describe('criarConta', () => {

    // Creates a new account with valid input data
    it('should create a new account when valid input data is provided', () => {
        const req = {
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/1990',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 'password'
            }
        };
        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        };
        const initialLength = contas.length;
        criarConta(req, res);
        expect(res.status).toHaveBeenCalledWith(204);
        expect(res.json).toHaveBeenCalledWith({
            "mensagem": "Conta criada com sucesso!"
        });
        expect(contas.length).toBe(initialLength + 1);
    });

    // Generates a unique account number using uuidv4
    it('should generate a unique account number using uuidv4', () => {
        const req = {
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/1990',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 'password'
            }
        };
        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        };
        criarConta(req, res);
        const novaConta = contas[0];
        expect(novaConta.numero).toBeDefined();
        expect(typeof novaConta.numero).toBe('string');
    });

    // Sets the initial account balance to 1000000
    it('should set the initial account balance to 1000000', () => {
        const req = {
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/1990',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 'password'
            }
        };
        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        };
        criarConta(req, res);
        const novaConta = contas[0];
        expect(novaConta.saldo).toBe(1000000);
    });

    // Throws an error if required input data is missing
    it('should throw an error if required input data is missing', () => {
        const req = {
            body: {}
        };
        const res = {
            status: jest.fn().mockReturnThis(),
            send: jest.fn(),
            json: jest.fn()
        };
        criarConta(req, res);
        expect(res.status).toHaveBeenCalledWith(204);
        expect(res.json).toHaveBeenCalledWith({ "mensagem": "Conta criada com sucesso!" });
    });

    // Throws an error if input data is not in the correct format
    it('should throw an error if input data is not in the correct format', () => {
        const req = {
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/1990',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 123456
            }
        };
        const res = {
            status: jest.fn().mockReturnThis(),
            send: jest.fn()
        };
        criarConta(req, res);
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.send).toHaveBeenCalledWith({ "mensagem": "res.status(...).json is not a function" });
    });

    // Throws an error if account creation fails for any reason
    it('should throw an error if account creation fails for any reason', () => {
        const req = {
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/1990',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 'password'
            }
        };
        const res = {
            status: jest.fn().mockImplementation(() => {
                throw new Error('Error message');
            }),
            send: jest.fn()
        };
        expect(() => criarConta(req, res)).toThrow('Error message');
    });
});
