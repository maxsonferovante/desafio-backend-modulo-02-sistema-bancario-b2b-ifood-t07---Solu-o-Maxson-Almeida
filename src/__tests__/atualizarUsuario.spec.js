// Generated by CodiumAI

const { atualizarUsuario } = require('../controladores/contaBancaria');
const { contas } = require('../bancodedados');


describe('atualizarUsuario', () => {

    // Should update the user information successfully
    it('should update the user information successfully when the account number exists', () => {
        const req = {
            params: {
                numeroConta: '123456'
            },
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/2000',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 'password'
            }
        };

        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        };

        const contaIndex = 0;
        const contaAtualizada = {
            numero: req.params.numeroConta,
            saldo: contas[contaIndex].saldo,
            usuario: {
                nome: req.body.nome,
                cpf: req.body.cpf,
                data_nascimento: req.body.data_nascimento,
                telefone: req.body.telefone,
                email: req.body.email,
                senha: req.body.senha
            }
        };

        contas[contaIndex] = contaAtualizada;

        atualizarUsuario(req, res);

        expect(res.status).toHaveBeenCalledWith(204);
        expect(res.json).toHaveBeenCalledWith({
            "mensagem": "Conta atualizada com sucesso!"
        });
    });

    // Should return a 400 status code if an error occurs
    it('should return a 400 status code if an error occurs when updating the user information', () => {
        const req = {
            params: {
                numeroConta: '123456'
            },
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/2000',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 'password'
            }
        };

        const res = {
            status: jest.fn().mockReturnThis(),
            send: jest.fn()
        };

        const contaIndex = contas.findIndex(conta => conta.numero === req.params.numeroConta);
        contas[contaIndex] = {
            numero: req.params.numeroConta,
            saldo: 0,
            usuario: {
                nome: req.body.nome,
                cpf: req.body.cpf,
                data_nascimento: req.body.data_nascimento,
                telefone: req.body.telefone,
                email: req.body.email,
                senha: req.body.senha
            }
        };

        atualizarUsuario(req, res);

        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.send).toHaveBeenCalledWith({ "mensagem": "res.status(...).json is not a function" });
    });

    // undefined
    undefined

    // Should return a 204 status code
    it('should return a 204 status code when updating the user information successfully', () => {
        const req = {
            params: {
                numeroConta: '123456'
            },
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/2000',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 'password'
            }
        };

        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        };

        const contaIndex = 0;
        const contaAtualizada = {
            numero: req.params.numeroConta,
            saldo: contas[contaIndex].saldo,
            usuario: {
                nome: req.body.nome,
                cpf: req.body.cpf,
                data_nascimento: req.body.data_nascimento,
                telefone: req.body.telefone,
                email: req.body.email,
                senha: req.body.senha
            }
        };

        contas[contaIndex] = contaAtualizada;

        atualizarUsuario(req, res);

        expect(res.status).toHaveBeenCalledWith(204);
    });

    // Should return a success message
    it('should return a success message when updating the user information successfully', () => {
        const req = {
            params: {
                numeroConta: '123456'
            },
            body: {
                nome: 'John Doe',
                cpf: '123456789',
                data_nascimento: '01/01/2000',
                telefone: '1234567890',
                email: 'johndoe@example.com',
                senha: 'password'
            }
        };

        const res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        };

        const contaIndex = 0;
        const contaAtualizada = {
            numero: req.params.numeroConta,
            saldo: contas[contaIndex].saldo,
            usuario: {
                nome: req.body.nome,
                cpf: req.body.cpf,
                data_nascimento: req.body.data_nascimento,
                telefone: req.body.telefone,
                email: req.body.email,
                senha: req.body.senha
            }
        };

        contas[contaIndex] = contaAtualizada;

        atualizarUsuario(req, res);

        expect(res.json).toHaveBeenCalledWith({
            "mensagem": "Conta atualizada com sucesso!"
        });
    });
});
